From a38e645ce9a2b67c25a284aa3044cfe02c58a641 Mon Sep 17 00:00:00 2001
From: Mio <mio@mio19.uk>
Date: Thu, 11 Sep 2025 13:23:29 +1000
Subject: [PATCH] gpu patch

https://t.me/linux_on_droid/19434 -> https://t.me/linux_on_droid/9783
---
 .../gpu/arm/b_r26p0/context/mali_kbase_context.c   | 14 +-------------
 .../gpu/arm/bv_r32p1/context/mali_kbase_context.c  | 14 +-------------
 .../gpu/arm/bv_r38p1/context/mali_kbase_context.c  | 14 +-------------
 3 files changed, 3 insertions(+), 39 deletions(-)

diff --git a/drivers/gpu/arm/b_r26p0/context/mali_kbase_context.c b/drivers/gpu/arm/b_r26p0/context/mali_kbase_context.c
index df9f41d2e..a1c597358 100644
--- a/drivers/gpu/arm/b_r26p0/context/mali_kbase_context.c
+++ b/drivers/gpu/arm/b_r26p0/context/mali_kbase_context.c
@@ -143,41 +143,29 @@ int kbase_context_common_init(struct kbase_context *kctx)
 	atomic_set(&kctx->nonmapped_pages, 0);
 	atomic_set(&kctx->permanent_mapped_pages, 0);
 	kctx->tgid = current->tgid;
 	kctx->pid = current->pid;
 
 	/* Check if this is a Userspace created context */
 	if (likely(kctx->filp)) {
-		struct pid *pid_struct;
-
+			struct task_struct *task = current;
 		rcu_read_lock();
-		pid_struct = find_get_pid(kctx->tgid);
-		if (likely(pid_struct)) {
-			struct task_struct *task = pid_task(pid_struct, PIDTYPE_PID);
 
 			if (likely(task)) {
 				/* Take a reference on the task to avoid slow lookup
 				 * later on from the page allocation loop.
 				 */
 				get_task_struct(task);
 				kctx->task = task;
 			} else {
 				dev_err(kctx->kbdev->dev,
 					"Failed to get task pointer for %s/%d",
 					current->comm, current->pid);
 				err = -ESRCH;
 			}
-
-			put_pid(pid_struct);
-		} else {
-			dev_err(kctx->kbdev->dev,
-				"Failed to get pid pointer for %s/%d",
-				current->comm, current->pid);
-			err = -ESRCH;
-		}
 		rcu_read_unlock();
 
 		if (unlikely(err))
 			return err;
                 kbase_mem_mmgrab();
                 kctx->process_mm = current->mm;
 	}
diff --git a/drivers/gpu/arm/bv_r32p1/context/mali_kbase_context.c b/drivers/gpu/arm/bv_r32p1/context/mali_kbase_context.c
index 5c5196e89..388f443e9 100644
--- a/drivers/gpu/arm/bv_r32p1/context/mali_kbase_context.c
+++ b/drivers/gpu/arm/bv_r32p1/context/mali_kbase_context.c
@@ -187,41 +187,29 @@ int kbase_context_common_init(struct kbase_context *kctx)
 	atomic_set(&kctx->nonmapped_pages, 0);
 	atomic_set(&kctx->permanent_mapped_pages, 0);
 	kctx->tgid = current->tgid;
 	kctx->pid = current->pid;
 
 	/* Check if this is a Userspace created context */
 	if (likely(kctx->filp)) {
-		struct pid *pid_struct;
-
+			struct task_struct *task = current;
 		rcu_read_lock();
-		pid_struct = find_get_pid(kctx->tgid);
-		if (likely(pid_struct)) {
-			struct task_struct *task = pid_task(pid_struct, PIDTYPE_PID);
 
 			if (likely(task)) {
 				/* Take a reference on the task to avoid slow lookup
 				 * later on from the page allocation loop.
 				 */
 				get_task_struct(task);
 				kctx->task = task;
 			} else {
 				dev_err(kctx->kbdev->dev,
 					"Failed to get task pointer for %s/%d",
 					current->comm, current->pid);
 				err = -ESRCH;
 			}
-
-			put_pid(pid_struct);
-		} else {
-			dev_err(kctx->kbdev->dev,
-				"Failed to get pid pointer for %s/%d",
-				current->comm, current->pid);
-			err = -ESRCH;
-		}
 		rcu_read_unlock();
 
 		if (unlikely(err))
 			return err;
                 kbase_mem_mmgrab();
                 kctx->process_mm = current->mm;
 	}
diff --git a/drivers/gpu/arm/bv_r38p1/context/mali_kbase_context.c b/drivers/gpu/arm/bv_r38p1/context/mali_kbase_context.c
index f67dddd15..dede7866a 100644
--- a/drivers/gpu/arm/bv_r38p1/context/mali_kbase_context.c
+++ b/drivers/gpu/arm/bv_r38p1/context/mali_kbase_context.c
@@ -187,41 +187,29 @@ int kbase_context_common_init(struct kbase_context *kctx)
 	atomic_set(&kctx->nonmapped_pages, 0);
 	atomic_set(&kctx->permanent_mapped_pages, 0);
 	kctx->tgid = current->tgid;
 	kctx->pid = current->pid;
 
 	/* Check if this is a Userspace created context */
 	if (likely(kctx->filp)) {
-		struct pid *pid_struct;
-
+			struct task_struct *task = current;
 		rcu_read_lock();
-		pid_struct = find_get_pid(kctx->tgid);
-		if (likely(pid_struct)) {
-			struct task_struct *task = pid_task(pid_struct, PIDTYPE_PID);
 
 			if (likely(task)) {
 				/* Take a reference on the task to avoid slow lookup
 				 * later on from the page allocation loop.
 				 */
 				get_task_struct(task);
 				kctx->task = task;
 			} else {
 				dev_err(kctx->kbdev->dev,
 					"Failed to get task pointer for %s/%d",
 					current->comm, current->pid);
 				err = -ESRCH;
 			}
-
-			put_pid(pid_struct);
-		} else {
-			dev_err(kctx->kbdev->dev,
-				"Failed to get pid pointer for %s/%d",
-				current->comm, current->pid);
-			err = -ESRCH;
-		}
 		rcu_read_unlock();
 
 		if (unlikely(err))
 			return err;
                 kbase_mem_mmgrab();
                 kctx->process_mm = current->mm;
 	}
-- 
2.50.1

